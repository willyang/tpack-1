import * as assert from "assert"
import * as np from "path"
import * as matcher from "../../src/utils/matcher"

export namespace matcherTest {

	export function matchTest() {
		assert.strictEqual(matcher.match("foo", "foo"), true)
		assert.strictEqual(matcher.match("myfoo", "foo"), false)
		assert.strictEqual(matcher.match("foo", "foo.js"), false)
		assert.strictEqual(matcher.match("foo/goo2", "foo/goo"), false)
		assert.strictEqual(matcher.match("foo.js", "foo.js"), true)
		assert.strictEqual(matcher.match("path/to/foo.js", "path/to/*.js"), true)
		assert.strictEqual(matcher.match("path/to/foo.css", "path/to/*.js"), false)
		assert.strictEqual(matcher.match("path/to.js", "path/to/*.js"), false)
		assert.strictEqual(matcher.match("path/to/foo/goo.js", "path/to/*.js"), false)
		assert.strictEqual(matcher.match("root/path/to/foo.js", "./root/path/to/*.js"), true)
		assert.strictEqual(matcher.match("root/path/toa/foo.js", "./root/path/to/*.js"), false)
		assert.strictEqual(matcher.match("foo.js", "./*.js"), true)
		assert.strictEqual(matcher.match("foo/goo.js", "./*.js"), false)
		assert.strictEqual(matcher.match("foo.js", "*.js"), true)
		assert.strictEqual(matcher.match("goo/foo.js", "*.js", { matchBase: true }), true)
		assert.strictEqual(matcher.match("foo/goo/.js", "*.js"), false)
		assert.strictEqual(matcher.match("foo/goo/.js", "**/*.js"), false)
		assert.strictEqual(matcher.match("foo/goo/.js", "f**o/*.js"), false)
		assert.strictEqual(matcher.match("foo/goo/.js", "*.js", { matchBase: true, dot: true }), true)
		assert.strictEqual(matcher.match("foo/goo/.js", "**/*.js", { dot: true }), true)
		assert.strictEqual(matcher.match("foo/goo/.js", "f**o/*.js", { dot: true }), true)
		assert.strictEqual(matcher.match(".js", "**/*.js"), false)
		assert.strictEqual(matcher.match(".js", "**.js"), false)
		assert.strictEqual(matcher.match(".js", "**/*.js"), false)
		assert.strictEqual(matcher.match("path/a", "path/?"), true)
		assert.strictEqual(matcher.match("path/ab", "path/?"), false)
		assert.strictEqual(matcher.match("path/a", "path/[ab]"), true)
		assert.strictEqual(matcher.match("path/b", "path/[ab]"), true)
		assert.strictEqual(matcher.match("path/ab", "path/[ab]"), false)
		assert.strictEqual(matcher.match("path/a", "path/[!ab]"), false)
		assert.strictEqual(matcher.match("path/b", "path/[!ab]"), false)
		assert.strictEqual(matcher.match("path/c", "path/[!ab]"), true)
		assert.strictEqual(matcher.match("path/", "path/*"), false)
		assert.strictEqual(matcher.match("path/foo", "path/*"), true)
		assert.strictEqual(matcher.match("path/foo", "path/foo*"), true)
		assert.strictEqual(matcher.match("path/abcd", "path/a*"), true)
		assert.strictEqual(matcher.match("path/foo/goo", "path/foo/"), true)
		assert.strictEqual(matcher.match("path/foo/goo", "path/*/"), true)
		assert.strictEqual(matcher.match("path/foo", "path/*/"), false)
		assert.strictEqual(matcher.match("path/foo", "path/*"), true)
		assert.strictEqual(matcher.match("path/foo/", "path/foo/"), true)
		assert.strictEqual(matcher.match("path/", "path/**/*"), false)
		assert.strictEqual(matcher.match("path/foo", "path/**/*"), true)
		assert.strictEqual(matcher.match("path/subdir/foo.js", "path/**/subdir/foo.*"), true)
		assert.strictEqual(matcher.match("path/foo/subdir/foo.js", "path/**/subdir/foo.*"), true)
		assert.strictEqual(matcher.match("path/foo/subdir/foo1.js", "path/**/subdir/foo.*"), false)
		assert.strictEqual(matcher.match("path/foo/subdir/foo", "path/**/subdir/foo.*"), false)
		assert.strictEqual(matcher.match("path/foo/foo2/subdir/foo.txt", "path/**/subdir/foo.*"), true)
		assert.strictEqual(matcher.match("path/foo/foo2/subdir/foo", "path/**/subdir/foo.*"), false)
		assert.strictEqual(matcher.match("path/foo/foo2/subdir/foo.txt", "./path/**/subdir/foo.*"), true)
		assert.strictEqual(matcher.match("path/foo/foo2/subdir/foo.txt", "./path/**/subdir/foo.*"), true)
		assert.strictEqual(matcher.match("../path/foo/foo2/subdir/foo.txt", "../path/**/subdir/foo.*"), true)
		assert.strictEqual(matcher.match("../path/foo/foo2/subdir/foo.txt", "../path/**/subdir/foo.*", { noBack: true }), false)

		assert.strictEqual(matcher.match("../path/foo/foo2/subdir/Foo.txt", ["../path/**/subdir/foo.*"], { ignoreCase: true }), true)
		assert.strictEqual(matcher.match("../path/foo/foo2/subdir/Foo.txt", ["../path/**/subdir/foo.*", "!**/foo.txt"], { ignoreCase: false }), false)
		assert.strictEqual(matcher.match("../path/foo/foo2/subdir/foo.txt", ["../path/**/subdir/foo.*", "!../**/foo.txt"]), false)
		assert.strictEqual(matcher.match("foo.js", file => true), true)
		assert.strictEqual(matcher.match("foo.js", ["!foo.js", (file: string) => true]), false)
		assert.strictEqual(matcher.match("foo.js", file => false), false)
		assert.strictEqual(matcher.match("foo.js", "./foo.js"), true)
		assert.strictEqual(matcher.match("foo.js", "./*.js"), true)
		assert.strictEqual(matcher.match("[.js", "[.js"), true)

		assert.strictEqual(matcher.match("foo.js", /foo\.js/), true)
		assert.strictEqual(matcher.match("goo.js", new matcher.Matcher(["!goo.js", /foo\.js/])), false)
		const m = new matcher.Matcher(/foo\.js/)
		m.exclude("goo.js")
		assert.strictEqual(matcher.match("goo.js", m), false)
		assert.strictEqual(matcher.match("foo", new matcher.Matcher([])), false)

		assert.strictEqual(matcher.match("foo", "./"), true)
		if (np.sep === "\\") {
			assert.strictEqual(matcher.match("E:\\foo", "E:\\foo"), true)
			assert.strictEqual(matcher.match("E:\\foo\\goo.txt", "E:\\foo"), true)
			assert.strictEqual(matcher.match("E:\\foo\\goo.txt", "E:\\foo\\*"), true)
		} else {
			assert.strictEqual(matcher.match("/user/local", "/user/local"), true)
			assert.strictEqual(matcher.match("/user/local/file.txt", "/user/local"), true)
			assert.strictEqual(matcher.match("/user/local/file.txt", "/user/local/*"), true)
		}

		assert.strictEqual(matcher.match("abc", "a*****?c"), true)
		assert.strictEqual(matcher.match("abc", "?*****??"), true)
		assert.strictEqual(matcher.match("[z-a]", "[z-a]"), true)
		assert.strictEqual(matcher.match("[a-z]", "[a-z]"), false)
		assert.strictEqual(matcher.match("b", "[a-z]"), true)
		assert.strictEqual(matcher.match("\u0100", "[a-\u0100]"), true)
		assert.strictEqual(matcher.match("abc", "a?c"), true)
		assert.strictEqual(matcher.match("a[", "a\\["), true)
		assert.strictEqual(matcher.match("a", "a*"), true)
		assert.strictEqual(matcher.match("abc", "a*"), true)
		assert.strictEqual(matcher.match("abd", "a*"), true)
		assert.strictEqual(matcher.match("abe", "a*"), true)
		assert.strictEqual(matcher.match("X*", "X*"), true)

		assert.strictEqual(matcher.match("\*", "\*"), true)
		assert.strictEqual(matcher.match("\**", "\**"), true)
		assert.strictEqual(matcher.match("\*\*", "\*\*"), true)
		assert.strictEqual(matcher.match("bdir/", "b*/"), true)
		assert.strictEqual(matcher.match("c", "c*"), true)
		assert.strictEqual(matcher.match("ca", "c*"), true)
		assert.strictEqual(matcher.match("cb", "c*"), true)
		assert.strictEqual(matcher.match("a", "**"), true)
		assert.strictEqual(matcher.match("b", "**"), true)
		assert.strictEqual(matcher.match("c", "**"), true)
		assert.strictEqual(matcher.match("d", "**"), true)
		assert.strictEqual(matcher.match("abc", "**"), true)
		assert.strictEqual(matcher.match("abd", "**"), true)
		assert.strictEqual(matcher.match("abe", "**"), true)
		assert.strictEqual(matcher.match("bb", "**"), true)
		assert.strictEqual(matcher.match("bcd", "**"), true)
		assert.strictEqual(matcher.match("ca", "**"), true)
		assert.strictEqual(matcher.match("cb", "**"), true)
		assert.strictEqual(matcher.match("dd", "**"), true)
		assert.strictEqual(matcher.match("de", "**"), true)
		assert.strictEqual(matcher.match("bdir/", "**"), true)
		assert.strictEqual(matcher.match("bdir/cfile", "**"), true)

		assert.strictEqual(matcher.match("abc", "[a-c]b*"), true)
		assert.strictEqual(matcher.match("abd", "[a-c]b*"), true)
		assert.strictEqual(matcher.match("abe", "[a-c]b*"), true)
		assert.strictEqual(matcher.match("bb", "[a-c]b*"), true)
		assert.strictEqual(matcher.match("cb", "[a-c]b*"), true)
		assert.strictEqual(matcher.match("abd", "[a-y]*[!c]"), true)
		assert.strictEqual(matcher.match("abd", "[a-y]*[!d]"), false)
		assert.strictEqual(matcher.match("abe", "[a-y]*[!c]"), true)
		assert.strictEqual(matcher.match("bb", "[a-y]*[!c]"), true)
		assert.strictEqual(matcher.match("bcd", "[a-y]*[!c]"), true)
		assert.strictEqual(matcher.match("bdir/", "[a-y]*[!c]"), true)
		assert.strictEqual(matcher.match("ca", "[a-y]*[!c]"), true)
		assert.strictEqual(matcher.match("cb", "[a-y]*[!c]"), true)
		assert.strictEqual(matcher.match("dd", "[a-y]*[!c]"), true)
		assert.strictEqual(matcher.match("de", "[a-y]*[!c]"), true)
		assert.strictEqual(matcher.match("abd", "a*[!c]"), true)
		assert.strictEqual(matcher.match("abe", "a*[!c]"), true)

		assert.strictEqual(matcher.match("a-b", "a[X-]b"), true)
		assert.strictEqual(matcher.match("aXb", "a[X-]b"), true)

		assert.strictEqual(matcher.match("d", "[!a-c]*"), true)
		assert.strictEqual(matcher.match("dd", "[!a-c]*"), true)
		assert.strictEqual(matcher.match("de", "[!a-c]*"), true)

		assert.strictEqual(matcher.match("a*b/ooo", "a\*b/*"), true)
		assert.strictEqual(matcher.match("a*b/ooo", "a\*?/*"), true)

		assert.strictEqual(matcher.match("echo !7", "*\!*"), true)
		assert.strictEqual(matcher.match("r.*", "*.\*"), true)
		assert.strictEqual(matcher.match("abc", "a[b]c"), true)
		assert.strictEqual(matcher.match("abc", "a[\\b]c"), true)
		assert.strictEqual(matcher.match("abc", "a?c"), true)

		assert.strictEqual(matcher.match("", ""), true)

		assert.strictEqual(matcher.match("man/man1/bash.1", "*/man*/bash.*"), true)
		assert.strictEqual(matcher.match("man/man1/bash.1", "man/man1/bash.1"), true)
		assert.strictEqual(matcher.match("abc", "a***c"), true)
		assert.strictEqual(matcher.match("abc", "a*****?c"), true)
		assert.strictEqual(matcher.match("abc", "?*****??"), true)
		assert.strictEqual(matcher.match("abc", "*****??"), true)
		assert.strictEqual(matcher.match("abc", "?*****?c"), true)
		assert.strictEqual(matcher.match("abc", "?***?****c"), true)
		assert.strictEqual(matcher.match("abc", "?***?****?"), true)
		assert.strictEqual(matcher.match("abc", "?***?****"), true)
		assert.strictEqual(matcher.match("abc", "*******c"), true)
		assert.strictEqual(matcher.match("abc", "*******?"), true)
		assert.strictEqual(matcher.match("abcdecdhjk", "a*cd**?**??k"), true)
		assert.strictEqual(matcher.match("abcdecdhjk", "a**?**cd**?**??k"), true)

		assert.strictEqual(matcher.match("abcdecdhjk", "a**?**cd**?**??k***"), true)
		assert.strictEqual(matcher.match("abcdecdhjk", "a**?**cd**?**??***k"), true)
		assert.strictEqual(matcher.match("abcdecdhjk", "a**?**cd**?**??***k**"), true)
		assert.strictEqual(matcher.match("abcdecdhjk", "a****c**?**??*****"), true)
		assert.strictEqual(matcher.match("-", "[-abc]"), true)
		assert.strictEqual(matcher.match("-", "[abc-]"), true)
		assert.strictEqual(matcher.match("[", "[[]"), true)
		assert.strictEqual(matcher.match("[", "["), true)
		assert.strictEqual(matcher.match("[abc", "[*"), true)

		assert.strictEqual(matcher.match("]", "[]]"), true)
		assert.strictEqual(matcher.match("]", "[]-]"), true)
		assert.strictEqual(matcher.match("p", "[a-z]"), true)

		assert.strictEqual(matcher.match("xYz", "XYZ"), true)
		assert.strictEqual(matcher.match("ABC", "ab*"), true)
		assert.strictEqual(matcher.match("ABC", "[ia]?[ck]"), true)
		assert.strictEqual(matcher.match("IjK", "[ia]?[ck]"), true)

		assert.strictEqual(matcher.match("a/b", "**"), true)

		assert.strictEqual(matcher.match("a/c/b", "a/*/b"), true)
		assert.strictEqual(matcher.match("a/.d/b", "a/*/b"), false)
		assert.strictEqual(matcher.match("a/.d/b", "a/*/b", { dot: true }), true)
		assert.strictEqual(matcher.match("a/./b", "a/.*/b"), false)
		assert.strictEqual(matcher.match("a/../b", "a/.*/b"), false)
		assert.strictEqual(matcher.match("a/.d/b", "a/.*/b"), true)
		assert.strictEqual(matcher.match("a/b", "**"), true)
		assert.strictEqual(matcher.match("a/.d", "**"), false)
		assert.strictEqual(matcher.match(".a/.d", "**"), false)

		assert.strictEqual(matcher.match("[!ab", "[!a*"), true)
		assert.strictEqual(matcher.match("[#ab", "[#a*"), true)
		assert.strictEqual(matcher.match("x/y/acb", "a?b", { matchBase: true }), true)
		assert.strictEqual(matcher.match("acb/", "a?b/**"), true)
		assert.strictEqual(matcher.match("#a", "#*"), true)
		assert.strictEqual(matcher.match("#b", "#*"), true)

		assert.strictEqual(matcher.match("\!a", ["*", "!a*"]), true)
		assert.strictEqual(matcher.match("d", ["*", "!a*"]), true)
		assert.strictEqual(matcher.match("e", ["*", "!a*"]), true)
		assert.strictEqual(matcher.match("!ab", ["*", "!a*"]), true)
		assert.strictEqual(matcher.match("!abc", ["*", "!a*"]), true)
		assert.strictEqual(matcher.match("!ab", ["*", "!a*"]), true)
		assert.strictEqual(matcher.match("!abc", ["*", "!a*"]), true)
		assert.strictEqual(matcher.match("a!b", ["*", "!!a*"]), true)
		assert.strictEqual(matcher.match("a!b", ["*", "!\\!a*"]), true)
		assert.strictEqual(matcher.match("d", ["*", "!\\!a*"]), true)
		assert.strictEqual(matcher.match("e", ["*", "!\\!a*"]), true)
		assert.strictEqual(matcher.match("!a", ["*", "!\\!a*"], { noAbsolute: true }), false)

		assert.strictEqual(matcher.match(".x", "**/.x"), true)
		assert.strictEqual(matcher.match(".x/a", "**/.x/**"), true)
		assert.strictEqual(matcher.match(".x/a/b", "**/.x/**"), true)
		assert.strictEqual(matcher.match("a/.x/b", "**/.x/**"), true)

		assert.strictEqual(matcher.match("a/b/.x/", "**/.x/**"), true)
		assert.strictEqual(matcher.match("a/b/.x/c", "**/.x/**"), true)
		assert.strictEqual(matcher.match("a/b/.x/c/d", "**/.x/**"), true)
		assert.strictEqual(matcher.match("a/b/.x/c/d/e", "**/.x/**"), true)

		assert.strictEqual(matcher.match("a.js", "**.js"), true)
		assert.strictEqual(matcher.match("a/b.js", "**.js"), true)
		assert.strictEqual(matcher.match("a/b/c.js", "**.js"), true)
		assert.strictEqual(matcher.match("a/b/.js", "**.js"), false)
		assert.strictEqual(matcher.match("a/.b/c.js", "**.js"), false)
		assert.strictEqual(matcher.match(".a/b/c.js", "**.js"), false)

		assert.strictEqual(matcher.match("a.js", "*"), true)
		assert.strictEqual(matcher.match("b/a.js", "*", { matchDir: false, matchBase: false }), false)

		assert.strictEqual(matcher.match("a.js", "*.{js,jsx}"), true)
		assert.strictEqual(matcher.match("a.jsx", "*.{js,jsx}"), true)
		assert.strictEqual(matcher.match("a.ts", "*.{js,jsx}"), false)
		assert.strictEqual(matcher.match("a.ts", "*.{js,jsx"), false)
		assert.strictEqual(matcher.match("a.ts", "[!a].ts"), false)
		assert.strictEqual(matcher.match("x.ts", "[!a].ts"), true)
		assert.strictEqual(matcher.match("a.ts", "[a!].ts"), true)
		assert.strictEqual(matcher.match("x.ts", "[a!].ts"), false)
		assert.strictEqual(matcher.match("].ts", "[]].ts"), true)
		assert.strictEqual(matcher.match("[.ts", "[.ts"), true)
		assert.strictEqual(matcher.match("a.,ts", "a.,ts"), true)
		assert.strictEqual(matcher.match("{a}.ts", "{a}.ts", { noBrace: true }), true)
		assert.strictEqual(matcher.match("x\\", "[x\\"), false)
		assert.strictEqual(matcher.match(np.resolve("foo"), np.resolve("foo")), true)
		assert.strictEqual(matcher.match(np.resolve("[]"), np.resolve("[]")), true)
		assert.strictEqual(matcher.match("xa.js", "x\\a.js"), true)
		assert.strictEqual(matcher.match("p[x].js", "p\\[x].js"), true)
		assert.strictEqual(matcher.match("bdir/x/x", "bdir/[x]/\\x"), true)
	}

	export function baseTest() {
		assert.strictEqual(new matcher.Matcher().base, np.resolve(".") + np.sep)
		assert.strictEqual(new matcher.Matcher("foo").base, np.resolve("foo"))
		assert.strictEqual(new matcher.Matcher("./foo").base, np.resolve("foo"))
		assert.strictEqual(new matcher.Matcher("path/to/*.js").base, np.resolve("path/to"))
		assert.strictEqual(new matcher.Matcher("./root/path/to/*.js").base, np.resolve("root/path/to"))
		assert.strictEqual(new matcher.Matcher("./*.js").base, np.resolve(".") + np.sep)
		assert.strictEqual(new matcher.Matcher("*.js").base, np.resolve(".") + np.sep)
		assert.strictEqual(new matcher.Matcher("**/*.js").base, np.resolve(".") + np.sep)
		assert.strictEqual(new matcher.Matcher("path/?").base, np.resolve("path/"))
		assert.strictEqual(new matcher.Matcher("path/foo[ab]").base, np.resolve("path/"))
		assert.strictEqual(new matcher.Matcher("path/*").base, np.resolve("path/"))
		assert.strictEqual(new matcher.Matcher("path/foo*").base, np.resolve("path/"))
		assert.strictEqual(new matcher.Matcher("path/**/*").base, np.resolve("path/"))
		assert.strictEqual(new matcher.Matcher("path/**/subdir/foo.*").base, np.resolve("path"))
		assert.strictEqual(new matcher.Matcher("foo/").base, np.resolve("foo") + np.sep)
		assert.strictEqual(new matcher.Matcher(["foo/goo", "foo/foo"]).base, np.resolve("foo"))
		assert.strictEqual(new matcher.Matcher(["foo/**/*.js", "foo/**/*.css"]).base, np.resolve("foo"))
		assert.strictEqual(new matcher.Matcher(/foo/).base, np.resolve(""))
		assert.strictEqual(new matcher.Matcher(["foo/", "!foo/"]).base, np.resolve("foo") + np.sep)
		assert.strictEqual(new matcher.Matcher(["../foo/**/*.js", "foo/**/*.css"], { baseDir: "root" }).base, np.resolve("."))
		assert.strictEqual(new matcher.Matcher(["../foo/**/*.js", /foo/], { baseDir: "root" }).base, np.resolve("."))
		assert.strictEqual(new matcher.Matcher("./").base, np.resolve(".") + np.sep)
		assert.strictEqual(new matcher.Matcher(".").base, np.resolve(".") + np.sep)
		assert.strictEqual(new matcher.Matcher("").base, np.resolve(".") + np.sep)
		assert.strictEqual(new matcher.Matcher("fo\\o").base, np.resolve("foo"))
		assert.strictEqual(new matcher.Matcher(["fo\\o", () => true], { baseDir: "src" }).base, np.resolve("src"))
		assert.strictEqual(new matcher.Matcher([1 as any], { baseDir: "src" }).base, np.resolve(".") + np.sep)
		assert.strictEqual(new matcher.Matcher("/foo", { noAbsolute: true }).base, np.resolve("foo"))
	}

	export function getBasesTest() {
		assert.deepStrictEqual(new matcher.Matcher().getBases(), [])
		assert.deepStrictEqual(new matcher.Matcher("foo").getBases(), [np.resolve("foo")])
		assert.deepStrictEqual(new matcher.Matcher(["foo", "goo"]).getBases(), [np.resolve("foo"), np.resolve("goo")])
		assert.deepStrictEqual(new matcher.Matcher(["foo", "foo/goo"]).getBases(), [np.resolve("foo")])
		assert.deepStrictEqual(new matcher.Matcher(["foo/goo/hoo", "foo/goo/"]).getBases(), [np.resolve("foo/goo") + np.sep])
		assert.deepStrictEqual(new matcher.Matcher(["foo/goo/hoo", "foo/goo"]).getBases(), [np.resolve("foo/goo")])
	}

	export function baseOfTest() {
		assert.strictEqual(new matcher.Matcher("foo").baseOf("foo/goo.js"), np.resolve("foo"))
		assert.strictEqual(new matcher.Matcher(["foo", "goo"]).baseOf("foo/goo.js"), np.resolve("foo"), np.resolve("goo"))
		assert.strictEqual(new matcher.Matcher(["foo", "foo/goo"]).baseOf("foo/goo.js"), np.resolve("foo"))
		assert.strictEqual(new matcher.Matcher(["foo/goo/hoo", "foo/goo/"]).baseOf("foo/goo/hoo.js"), np.resolve("foo/goo") + np.sep)
		assert.strictEqual(new matcher.Matcher(["foo/goo/hoo", "foo/goo"]).baseOf("foo/goo/hoo.js"), np.resolve("foo/goo"))
	}

	export function relativeTest() {
		assert.strictEqual(new matcher.Matcher("src").relative(np.resolve("src/x.js")), "x.js")
		assert.strictEqual(new matcher.Matcher("src/pages/").relative(np.resolve("src/pages/x.js")), "x.js")
		assert.strictEqual(new matcher.Matcher("src/pages").relative(np.resolve("src/pages/x.js")), "x.js")
		assert.strictEqual(new matcher.Matcher(["src/pages/", "src"]).relative(np.resolve("src/pages/x.js")), "x.js")
		assert.strictEqual(new matcher.Matcher(["src/pages", "src"]).relative(np.resolve("src/pages/x.js")), "x.js")
		assert.strictEqual(new matcher.Matcher(["src", "src/pages"]).relative(np.resolve("src/pages/x.js")), "x.js")
		assert.strictEqual(new matcher.Matcher(["src", "src/pages/"]).relative(np.resolve("src/pages/x.js")), "x.js")
		assert.strictEqual(new matcher.Matcher(["src", "src/pages/"]).relative(np.resolve("src/x.js")), "x.js")
		assert.strictEqual(new matcher.Matcher(["src/pages/", "src"]).relative(np.resolve("src/x.js")), "x.js")
		assert.strictEqual(new matcher.Matcher(["src/pages/", "src"]).relative(np.resolve("src")), "")
	}

	export function isGlobTest() {
		assert.strictEqual(matcher.isGlob("x.js"), false)
		assert.strictEqual(matcher.isGlob("*.js"), true)
		assert.strictEqual(matcher.isGlob("?.js"), true)
		assert.strictEqual(matcher.isGlob("[x].js"), true)
		assert.strictEqual(matcher.isGlob("[x].js", { noBracket: true }), false)
		assert.strictEqual(matcher.isGlob("{x}.js"), true)
		assert.strictEqual(matcher.isGlob("{x}.js", { noBrace: true }), false)
		assert.strictEqual(matcher.isGlob("!x.js"), true)
		assert.strictEqual(matcher.isGlob("!x.js", { noNegate: true }), false)
		assert.strictEqual(matcher.isGlob("\\x.js"), process.platform !== "win32")
		assert.strictEqual(matcher.isGlob("\\x.js", { noAbsolute: true }), true)
	}

}